#  Altered: 2024/12/26 - 12:26
#  Updated: 2025/01/04 - 15:47
#
#  Copyright (c) 2024-2025, Vilmar Catafesta <vcatafesta@gmail.com>
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AS IS'' AND ANY EXPRESS OR
#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
#  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
#  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
#  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
#  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
##############################################################################
name: "Build rootfs VoidLinux"
description: "Builds a tarball rootfs image for VoidLinux"

inputs:
  name:
    description: "Name for the ISO"
    required: true
  tmate:
    description: "Enable debugging with tmate"
    required: false
    default: false
  github_token:
    description: "GitHub token for authentication"
    required: true

outputs:
  iso_path:
    description: "Path to the generated ISO file"
    value: ${{ steps.build.outputs.iso_path }}
  xz_path:
    description: "Path to the generated TAR.XZ file"
    value: ${{ steps.build.outputs.xz_path }}
  release_name:
    description: "Name of the release"
    value: ${{ steps.prepare-iso.outputs.release_name }}

runs:
  using: "composite"
  steps:
    - name: Definir a função send_telegram_message no script temporário
      shell: bash
      env:
        TELEGRAM_TOKEN: "${{ inputs.telegram_token }}"
        TELEGRAM_CHAT_ID: "${{ inputs.telegram_chat_id }}"
      run: |
        #Definir a função send_telegram_message no script temporário
        cat << 'EOF' > /tmp/send_telegram_message.sh
        export TERM=${TERM:-xterm}
        export TERM=${TERM:-xterm-256color}

        #Definindo variáveis de cores
        export red="\033[01;31m"
        export green="\033[01;32m"
        export yellow="\033[01;33m"
        export blue="\033[01;34m"
        export pink="\033[01;35m"
        export cyan="\033[01;36m"
        export reset="\033[0m"
        alias ls='ls -lha --color=auto'
        alias dir='ls -lha --color=auto'

        die() {
          local msg="$1"
          msg="$(sed 's/<[^>]*>//g' <<< "$msg")" # Remove as tags HTML
          echo -e "BP=>${cyan}error: ${red}${msg}${reset}"
          exit  1
        }
        export -f die

        msg_raw() {
          local msg="$1"
          # Remove tags HTML, se existirem
          #msg="$(sed 's/<[^>]*>//g' <<< "$msg")"

          # Verifica se existe ':' na mensagem
          if [[ "$msg" == *:* ]]; then
            # Divide a string antes e depois do primeiro ':'
            local before_colon="${msg%%:*}:"
            local after_colon="${msg#*: }"
            # Aplica as cores
            msg="${cyan}${before_colon} ${yellow}${after_colon}${reset}"
          else
            # Se não houver ':', aplica apenas a cor padrão
            msg="${cyan}${msg}${reset}"
          fi
          echo -e "$msg"
        }
        export -f msg_raw

        msg() {
          local msg="$1"
          msg="$(sed 's/<[^>]*>//g' <<< "$msg")" # Remove as tags HTML
          echo -e "BP=>${cyan}running: ${yellow}${msg}${reset}"
        }
        export -f msg

        msg_ok() {
          local msg="$1"
          msg="$(sed 's/<[^>]*>//g' <<< "$msg")" # Remove as tags HTML
          echo -e "BP=>${cyan}feito  : ${green}${msg}${reset}"
        }
        export -f msg_ok

        msg_run() {
          local msg="$1"
          echo -e "BP=>${cyan}running: ${yellow}${msg}${reset}"

          # Executa o comando e captura o código de saída
          if ! eval "$msg"; then
            echo -e "BP=>${red}Erro ao executar: ${yellow}${msg}${reset}" >&2
            return 1
          fi
          return 0
        }
        export -f msg_run

        msg_info() {
          local msg="$1"
          msg="$(sed 's/<[^>]*>//g' <<< "$msg")" # Remove as tags HTML
          echo -e "BP=>${cyan}info   : ${yellow}${msg}${reset}"
        }
        export -f msg_info

        msg_warning() {
          local msg="$1"
          msg="$(sed 's/<[^>]*>//g' <<< "$msg")" # Remove as tags HTML
          echo -e "BP=>${red}warning: ${orange}${msg}${reset}"
        }
        export -f msg_warning

        replicate() {
          local char=${1:-'#'}
          local nsize=${2:-$(tput cols)}
          local line
          #printf -v line "%*s" "$nsize" && echo "${line// /$char}"
          #printf -v line "%*s" "$nsize" && echo -e "\033[31m${line// /$char}\033[0m"
          printf -v line "%*s" "$nsize" && echo -e "${blue}${line// /$char}${reset}"
        }
        export -f replicate

        send_telegram_message() {
          local message="$1"
          local parse_mode="$2"

          # Define parse_mode como "MarkdownV2" se não for especificado
          [[ -z $parse_mode ]] && parse_mode="HTML"

          # Remove as tags HTML e exibe o resultado no terminal
          echo -e "${green}$(sed 's/<[^>]*>//g' <<< "$message")${reset}"
          # Envia a mensagem original com HTML para o Telegram
          curl -s -X POST "https://api.telegram.org/bot${{ inputs.telegram_token }}/sendMessage" \
            -d chat_id="${{ inputs.telegram_chat_id }}" \
            -d text="$message" \
            -d parse_mode="$parse_mode"
        }
        export -f send_telegram_message
        EOF

    - name: Display the current user in CONTAINER
      shell: bash
      run: |
        # Display the current user in CONTAINER
        source /tmp/send_telegram_message.sh
        replicate "#"
        msg_raw "Current host is     : $(hostname)"
        msg_raw "Current user is     : $(whoami)"
        msg_raw "Current user ID is  : $(id -u)"
        msg_raw "Current user details: $(id)"
        replicate "#"
        df -hT || true
        replicate "#"
        ls -la /mnt || true
        replicate "#"

    - name: Setup build environment
      shell: bash
      run: |
        # Setup build environment
        {
        echo 'repository=https://repo-fastly.voidlinux.org/current'
        echo 'repository=https://repo-fastly.voidlinux.org/current/nonfree'
        echo 'repository=https://repo-fastly.voidlinux.org/current/multilib'
        echo 'repository=https://repo-fastly.voidlinux.org/current/multilib/nonfree'
        } >> /etc/xbps.d/00-repository-main.conf

        # atualizar e instalar pacotes adicionais
        xbps-install -Sy -f \
          tree \
          duf > /dev/null

    - name: Configurar o ambiente
      shell: bash
      run: |
        #WORK_PATH='/__w/build-rootfs-void/build-rootfs-void'
        #PROFILE_PATH='/__w/build-rootfs-void/build-rootfs-void/chili-void-mklive'
        WORK_PATH="/__w/${{env.REPO_NAME}}/${{env.REPO_NAME}}"
        PROFILE_PATH="/__w/${{env.REPO_NAME}}/${{env.REPO_NAME}}/chili-void-mklive"
        echo "WORK_PATH=$WORK_PATH"       >> "$GITHUB_ENV"  # Exporta WORK_PATH para outras etapas
        echo "PROFILE_PATH=$PROFILE_PATH" >> "$GITHUB_ENV"  # Exporta WORK_PATH para outras etapas

    - name: Ajustar ambiente do builduser
      shell: bash
      run: |
        # Ajustar ambiente do root
        pushd /root || true
        cp -Rpa /etc/skel/.bash* . || true
        cp -Rpa /etc/skel/.ps* . || true
        cp -Rpa /etc/skel/.dircolors* . || true
        cp -Rpa /etc/skel/.git-prompt* . || true
        popd || true

        # Ajustar ambiente do builduser
        sudo -u builduser bash << EOF
        cd $HOME || true
        cp -Rpa /etc/skel/.bash* . || true
        cp -Rpa /etc/skel/.ps* . || true
        cp -Rpa /etc/skel/.dircolors* . || true
        cp -Rpa /etc/skel/.git-prompt* . || true
        EOF

    - name: Checkout chili-void-mklive
      shell: bash
      run: |
        # Cloning chili-void-mklive repository
        #REPO="${{ inputs.iso_profiles_repo }}"
        #REPO="https://github.com/void-linux/chili-void-mklive"
        REPO="https://github.com/chililinux/chili-void-mklive"
        echo "Repository: $REPO"

        rm -rf "$PROFILE_PATH" || true
        if ! git clone --depth 1 "$REPO" "$PROFILE_PATH"; then
          echo "Falha ao clonar o repositorio $REPO em $PROFILE_PATH"
          exit 1
        fi
        # ativando 'git config --global --add safe.directory'
        git config --global --add safe.directory "$PROFILE_PATH" || true

        # clean '/__t/' directory
        rm -rf /__t/* || true

    - name: Setup TMATE Session
      uses: mxschmitt/action-tmate@v3
      if: ${{ inputs.tmate }} == 'true'
      with:
        install-dependencies: false
        detached: true

    - name: Build ROOTFS tarball
      shell: bash
      env:
        DEBUG: ${{ inputs.tmate }}
        DISTRONAME: ${{ inputs.name }}
        EDITION: ${{ inputs.edition }}
        MANJAROBRANCH: ${{ inputs.manjaro_branch }}
        COMMUNITYBRANCH: ${{ inputs.community_branch }}
        BIGBRANCH: ${{ inputs.biglinux_branch }}
        SCOPE: ${{ inputs.scope }}
        KERNEL: ${{ inputs.kernel }}
        OFFICE: ${{ inputs.office-chooser }}
        RELEASE_TAG: ${{ inputs.release_tag }}
      run: |
        # BUILD ISO Image
        # Denine path for directory

        source /tmp/send_telegram_message.sh

        # Check if iso-profiles directory exists before proceeding
        if [[ ! -d "$PROFILE_PATH" ]]; then
          die "ERRO(L427): Diretório $PROFILE_PATH não localizado!"
        fi

        # listando diretório iso-profiles no diretório atual
        msg_run "ls -lah $WORK_PATH"

        build_mkroot_fs() {
          replicate "######################### RESUMO #################################" 1
          msg_raw "BUILD COMMAND            : ./mkrootfs"
          msg_raw "PROFILE_PATH             : $PROFILE_PATH"
          replicate "#"
          msg_raw "WORK_PATH                : $WORK_PATH"
          msg_raw "PROFILE_PATH             : $PROFILE_PATH"
          msg_raw "ISO profiles path        : $PROFILE_PATH/$EDITION"
          #replicate "#"
          #msg_raw "ROOT_RUN_DIR             : $(< /root/.config/manjaro-tools/iso-profiles.conf)"
          #msg_raw "BUILDUSER_RUN_DIR        : $(< /home/builduser/.config/manjaro-tools/iso-profiles.conf)"
          replicate "#"

          pushd "$PROFILE_PATH" > /dev/null || true
          [[ ${{ inputs.tmate }} == 'true' ]] && ./mkrootfs || ./mkrootfs > /dev/null
          popd > /dev/null
        }

        cleanup_and_move_files() {
          OUTPUT_ISO_PATH_NAME=$(find "$PROFILE_PATH" -type f -name "*.iso" -exec stat -c '%Y %n' {} + | sort -nr | awk 'NR==1 {print $2}')
          OUTPUT_XZ_PATH_NAME=$(find "$PROFILE_PATH" -type f -name "*.tar.xz" -exec stat -c '%Y %n' {} + | sort -nr | awk 'NR==1 {print $2}')
          ISO_BASENAME=$(basename "$OUTPUT_ISO_PATH_NAME")
          XZ_BASENAME=$(basename "$OUTPUT_XZ_PATH_NAME")

          echo "OUTPUT_ISO_PATH_NAME=$OUTPUT_ISO_PATH_NAME" >> "$GITHUB_ENV"  # Exporta OUTPUT_ISO_PATH_NAME para outras etapas
          echo "OUTPUT_XZ_PATH_NAME=$OUTPUT_XZ_PATH_NAME" >> "$GITHUB_ENV"    # Exporta OUTPUT_ISO_PATH_NAME para outras etapas
          echo "ISO_BASENAME=$ISO_BASENAME" >> "$GITHUB_ENV"                  # Exporta OUTPUT_ISO_PATH_NAME para outras etapas
          echo "XZ_BASENAME=$XZ_BASENAME" >> "$GITHUB_ENV"                    # Exporta OUTPUT_ISO_PATH_NAME para outras etapas

          if [[ -n "$OUTPUT_ISO_PATH_NAME" ]]; then
            mv -fv "$OUTPUT_ISO_PATH_NAME" "$WORK_PATH/" || echo "ERRO: Falha ao mover arquivo ISO $OUTPUT_ISO_PATH_NAME"
            echo "ISO_FULLNAME=$WORK_PATH/$ISO_BASENAME" >> "$GITHUB_ENV"
          fi
          if [[ -n "$OUTPUT_XZ_PATH_NAME"  ]]; then
            mv -fv "$OUTPUT_XZ_PATH_NAME" "$WORK_PATH/"  || echo "ERRO: Falha ao mover arquivo XZ $OUTPUT_XZ_PATH_NAME"
            echo "XZ_FULLNAME=$WORK_PATH/$XZ_BASENAME" >> "$GITHUB_ENV"
          fi
        }

        build_mkroot_fs
        cleanup_and_move_files

    - name: Extrair data do nome do arquivo .tar.xz e definir tag_name
      id: set-tag-name
      shell: bash
      run: |
        FILENAME="$XZ_BASENAME"
        TAG_NAME=$(echo "$FILENAME" | grep -oP '\d{8}')-$(date +%H%M)
        echo "XZ_TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

    - name: Set ISO path
      shell: bash
      run: |
        # Set outputs
        echo "iso_path=$WORK_PATH/$ISO_BASENAME" >> "$GITHUB_OUTPUT"
        echo "xz_path=$WORK_PATH/$XZ_BASENAME" >> "$GITHUB_OUTPUT"
