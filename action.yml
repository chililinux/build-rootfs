name: "Build rootfs VoidLinux"
description: "Builds a tarball rootfs image for VoidLinux"

inputs:
  name:
    description: "Name for the ISO"
    required: true
  tmate:
    description: "Enable debugging with tmate"
    required: false
    default: true

outputs:
  iso_path:
    description: "Path to the generated ISO file"
    value: ${{ steps.build.outputs.iso_path }}
  xz_path:
    description: "Path to the generated TAR.XZ file"
    value: ${{ steps.build.outputs.xz_path }}
  release_name:
    description: "Name of the release"
    value: ${{ steps.prepare-iso.outputs.release_name }}

runs:
  using: "composite"
  steps:
    - name: Display the current user in CONTAINER
      shell: bash
      run: |
        # Display the current user in CONTAINER
        echo "##########################################################################"
        echo "Current host is     : $(hostname)"
        echo "Current user is     : $(whoami)"
        echo "Current user ID is  : $(id -u)"
        echo "Current user details: $(id)"
        echo "##########################################################################"
        df -hT || true
        echo "##########################################################################"
        ls -la /mnt || true
        echo "##########################################################################"

    - name: Setup build environment
      shell: bash
      run: |
        # Setup build environment
        {
        echo 'repository=https://repo-fastly.voidlinux.org/current'
        echo 'repository=https://repo-fastly.voidlinux.org/current/nonfree'
        echo 'repository=https://repo-fastly.voidlinux.org/current/multilib'
        echo 'repository=https://repo-fastly.voidlinux.org/current/multilib/nonfree'
        } >> /etc/xbps.d/00-repository-main.conf

        # atualizar e instalar pacotes adicionais
        xbps-install -Sy -f \
          tree \
          duf > /dev/null

    - name: Configurar o ambiente
      shell: bash
      run: |
        #WORK_PATH='/__w/build-rootfs-void/build-rootfs-void'
        #PROFILE_PATH='/__w/build-rootfs-void/build-rootfs-void/chili-void-mklive'
        WORK_PATH="/__w/${{env.REPO_NAME}}/${{env.REPO_NAME}}"
        PROFILE_PATH="/__w/${{env.REPO_NAME}}/${{env.REPO_NAME}}/chili-void-mklive"
        echo "WORK_PATH=$WORK_PATH"       >> "$GITHUB_ENV"  # Exporta WORK_PATH para outras etapas
        echo "PROFILE_PATH=$PROFILE_PATH" >> "$GITHUB_ENV"  # Exporta WORK_PATH para outras etapas

    - name: Ajustar ambiente do builduser
      shell: bash
      run: |
        # Ajustar ambiente do root
        pushd /root || true
        cp -Rpa /etc/skel/.bash* . || true
        cp -Rpa /etc/skel/.ps* . || true
        cp -Rpa /etc/skel/.dircolors* . || true
        cp -Rpa /etc/skel/.git-prompt* . || true
        popd || true

        # Ajustar ambiente do builduser
        sudo -u builduser bash << EOF
        cd $HOME || true
        cp -Rpa /etc/skel/.bash* . || true
        cp -Rpa /etc/skel/.ps* . || true
        cp -Rpa /etc/skel/.dircolors* . || true
        cp -Rpa /etc/skel/.git-prompt* . || true
        EOF

    - name: Checkout chili-void-mklive
      shell: bash
      run: |
        # Cloning chili-void-mklive repository
        #REPO="${{ inputs.iso_profiles_repo }}"
        #REPO="https://github.com/void-linux/chili-void-mklive"
        REPO="https://github.com/chililinux/chili-void-mklive"
        echo "Repository: $REPO"

        rm -rf "$PROFILE_PATH" || true
        if ! git clone --depth 1 "$REPO" "$PROFILE_PATH"; then
          echo "Falha ao clonar o repositorio $REPO em $PROFILE_PATH"
          exit 1
        fi
        # ativando 'git config --global --add safe.directory'
        git config --global --add safe.directory "$PROFILE_PATH" || true

        # clean '/__t/' directory
        rm -rf /__t/* || true

    - name: Setup TMATE Session
      uses: mxschmitt/action-tmate@v3
      if: ${{ inputs.tmate }} == 'true'
      with:
        install-dependencies: false
        detached: true

    - name: Build ROOTFS tarball
      shell: bash
      env:
        DEBUG: ${{ inputs.tmate }}
        DISTRONAME: ${{ inputs.name }}
        EDITION: ${{ inputs.edition }}
        MANJAROBRANCH: ${{ inputs.manjaro_branch }}
        COMMUNITYBRANCH: ${{ inputs.community_branch }}
        BIGBRANCH: ${{ inputs.biglinux_branch }}
        SCOPE: ${{ inputs.scope }}
        KERNEL: ${{ inputs.kernel }}
        OFFICE: ${{ inputs.office-chooser }}
        RELEASE_TAG: ${{ inputs.release_tag }}
      run: |
        # BUILD ISO Image
        # Denine path for directory

        # Check if iso-profiles directory exists before proceeding
        if [[ ! -d "$PROFILE_PATH" ]]; then
          echo "ERRO(L427): Diretório $PROFILE_PATH não localizado!"
          exit 1
        fi

        # listando diretório iso-profiles no diretório atual
        ls -la "$WORK_PATH"

        build_mkroot_fs() {
          echo "########################## RESUMO #################################"
          echo "BUILD COMMAND            : ./mkrootfs"
          echo "PROFILE_PATH             : $PROFILE_PATH"
          echo "EDITION                  : $EDITION"
          echo "MANJAROBRANCH            : $MANJAROBRANCH"
          echo "COMMUNITYBRANCH          : $COMMUNITYBRANCH"
          echo "BIGLINUXBRANCH           : $BIGBRANCH"
          echo "KERNEL_VER               : ${KERNEL_VER}"
          echo "KERNEL_NAME              : ${KERNEL_NAME}"
          echo "SCOPE                    : $SCOPE"
          echo "OFFICE                   : $OFFICE"
          echo "###################################################################"
          echo "WORK_PATH                : $WORK_PATH"
          echo "PROFILE_PATH             : $PROFILE_PATH"
          echo "ISO profiles path        : $PROFILE_PATH/$EDITION"
          echo "PATH_MANJARO_ISO_PROFILES: $PATH_MANJARO_ISO_PROFILES"
          echo "###################################################################"
          #echo "ROOT_RUN_DIR             : $(< /root/.config/manjaro-tools/iso-profiles.conf)"
          #echo "BUILDUSER_RUN_DIR        : $(< /home/builduser/.config/manjaro-tools/iso-profiles.conf)"
          echo "###################################################################"

          pushd "$PROFILE_PATH"
          #teste
          #echo "Arquivo 1 de teste" > arquivo1.txt
          #echo "Arquivo 2 de teste" > arquivo2.txt
          #tar -cvJf void-x86_64-base-custom-20240918.tar.xz arquivo1.txt arquivo2.txt
          #efetivo
          [[ ${{ inputs.tmate }} == 'true' ]] && ./mkrootfs || ./mkrootfs > /dev/null
          popd
        }

        cleanup_and_move_files() {
          OUTPUT_ISO_PATH_NAME=$(find "$PROFILE_PATH" -type f -name "*.iso" -exec stat -c '%Y %n' {} + | sort -nr | awk 'NR==1 {print $2}')
          OUTPUT_XZ_PATH_NAME=$(find "$PROFILE_PATH" -type f -name "*.tar.xz" -exec stat -c '%Y %n' {} + | sort -nr | awk 'NR==1 {print $2}')
          ISO_BASENAME=$(basename "$OUTPUT_ISO_PATH_NAME")
          XZ_BASENAME=$(basename "$OUTPUT_XZ_PATH_NAME")

          echo "OUTPUT_ISO_PATH_NAME=$OUTPUT_ISO_PATH_NAME" >> "$GITHUB_ENV"  # Exporta OUTPUT_ISO_PATH_NAME para outras etapas
          echo "OUTPUT_XZ_PATH_NAME=$OUTPUT_XZ_PATH_NAME" >> "$GITHUB_ENV"    # Exporta OUTPUT_ISO_PATH_NAME para outras etapas
          echo "ISO_BASENAME=$ISO_BASENAME" >> "$GITHUB_ENV"                  # Exporta OUTPUT_ISO_PATH_NAME para outras etapas
          echo "XZ_BASENAME=$XZ_BASENAME" >> "$GITHUB_ENV"                    # Exporta OUTPUT_ISO_PATH_NAME para outras etapas

          if [[ -n "$OUTPUT_ISO_PATH_NAME" ]]; then
            mv -fv "$OUTPUT_ISO_PATH_NAME" "$WORK_PATH/" || echo "ERRO: Falha ao mover arquivo ISO $OUTPUT_ISO_PATH_NAME"
            # Set environment variables
            echo "ISO_FULLNAME=$WORK_PATH/$ISO_BASENAME" >> "$GITHUB_ENV"
          fi
          if [[ -n "$OUTPUT_XZ_PATH_NAME"  ]]; then
            mv -fv "$OUTPUT_XZ_PATH_NAME" "$WORK_PATH/"  || echo "ERRO: Falha ao mover arquivo XZ $OUTPUT_XZ_PATH_NAME"
            # Set environment variables
            echo "XZ_FULLNAME=$WORK_PATH/$XZ_BASENAME" >> "$GITHUB_ENV"
          fi
        }

        main() {
          build_mkroot_fs
          cleanup_and_move_files
        }

        main

    - name: Extrair data do nome do arquivo .tar.xz e definir tag_name
      id: set-tag-name
      shell: bash
      run: |
        FILENAME="$XZ_BASENAME"
        TAG_NAME=$(echo "$FILENAME" | grep -oP '\d{8}')-$(date +%H%M)
        echo "XZ_TAG_NAME=$TAG_NAME" >> $GITHUB_ENV

    - name: Set ISO path
      shell: bash
      run: |
        # Set outputs
        echo "iso_path=$WORK_PATH/$ISO_BASENAME" >> "$GITHUB_OUTPUT"
        echo "xz_path=$WORK_PATH/$XZ_BASENAME" >> "$GITHUB_OUTPUT"

    - name: Calculate MD5 Hash of files
      shell: bash
      run: |
        pushd "${{ env.WORK_PATH }}"
        echo "Calculating MD5 hash for: ${{ env.XZ_FULLNAME }} file..."
        echo "XZ_BASENAME is: '${{ env.XZ_BASENAME }}'"
        if [[ -f "${{ env.XZ_BASENAME }}" ]]; then
          md5sum "${{ env.XZ_BASENAME }}" > "${{ env.XZ_BASENAME }}.md5"
          echo "MD5 '$XZ_BASENAME.md5' hash calculated and saved:"
          cat "${{ env.XZ_BASENAME }}.md5"
        else
          echo "ERRO: ${{ env.XZ_BASENAME }} file not found at ${{ env.WORK_PATH }}"
          exit 1
        fi
        popd

    - name: Prepare ZIP file for release
      id: prepare-iso
      shell: bash
      run: |
        ls -lha
        release=${{ env.XZ_BASENAME }} # Apenas obtém o nome do arquivo com extensão
        release="${release%.tar.xz}"
        echo "release_name=${release}" >> $GITHUB_ENV
        if zip \
            --junk-paths \
            --store \
            -s 2000m \
            ${release}.zip \
            ${{ env.XZ_FULLNAME }} \
            ${{ env.XZ_FULLNAME }}.md5; then
          echo "ZIP_FULLNAME=${{ env.WORK_PATH }}/${release}.zip" >> "$GITHUB_ENV"
          echo "ZIP_BASENAME=${release}.zip"                        >> "$GITHUB_ENV"
          echo "${ZIP_FULLNAME} prepared for release"
          ls -lha
        else
          echo "ERRO: No preparo do arquivo ZIP para release"
          exit 1
        fi

    - name: Debug environment variables and List Files
      run: |
        echo "ISO_BASENAME=${{ env.ISO_BASENAME }}"
        echo "ISO_FULLNAME=${{ env.ISO_FULLNAME }}"
        echo "XZ_BASENAME=${{ env.XZ_BASENAME }}"
        echo "XZ_FULLNAME=${{ env.XZ_FULLNAME }}"
        echo "ZIP_BASENEM=${{ env.ZIP_BASENAME }}"
        echo "ZIP_FULLNAME=${{ env.ZIP_FULLNAME }}"
        echo "ISO Path from output=${{ steps.define-paths.outputs.iso_path }}"
        echo "XZ Path from output=${{ steps.define-paths.outputs.xz_path }}"

        # ls -la "${{ env.WORK_PATH }}
        ls -lah "${{ env.WORK_PATH }}"

    - name: Upload FILES as artifact
      uses: actions/upload-artifact@v3
      env:
        GITHUB_TOKEN: ${{ secrets.ORGANIZATION_TOKEN }}
      with:
        name: ${{ env.ZIP_BASENAME }}
        path: |
          ${{ env.ZIP_FULLNAME }}
          ${{ env.XZ_FULLNAME }}
          ${{ env.XZ_FULLNAME }}.md5
        if-no-files-found: warn
        include-hidden-files: false

    - name: Criar release zip
      id: create_release_zip
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ORGANIZATION_TOKEN }}
      with:
        tag_name: ${{ github.run_id }}_zip
        release_name: Release ${{ needs.get-time.outputs.time }}_zip
        body: |
          - **Data e Hora        :** ${{ needs.get-time.outputs.time }}
          - **Nome do Repositório:** ${{ env.REPO_NAME }}
        draft: false
        prerelease: false

    - name: Fazer upload do arquivo .zip no release
      id: upload-release-asset-zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ORGANIZATION_TOKEN }}
      with:
        upload_url: ${{ steps.create_release_zip.outputs.upload_url }} # URL gerada no passo da criação da release
        asset_path: ${{ env.ZIP_FULLNAME }} # Caminho do arquivo .zip
        asset_name: ${{ env.REPO_NAME }}.zip
        asset_content_type: application/zip # Tipo correto para arquivos .zip

    - name: Criar release .tar.xz
      id: create_release_xz
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ORGANIZATION_TOKEN }}
      with:
        tag_name: ${{ env.XZ_TAG_NAME }}
        release_name: Release ${{ env.XZ_TAG_NAME }}
        body: |
          - **Data e Hora        :** ${{ needs.get-time.outputs.time }}
          - **Nome do Repositório:** ${{ env.REPO_NAME }}
        draft: false
        prerelease: false

    - name: Fazer upload do arquivo .tar.xz no release
      id: upload-release-asset-tar-xz
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.ORGANIZATION_TOKEN }}
      with:
        upload_url: ${{ steps.create_release_xz.outputs.upload_url }} # URL gerada no passo da criação da release
        asset_path: ${{ env.XZ_FULLNAME }} # Caminho do arquivo .tar.xz
        asset_name: ${{ env.XZ_BASENAME }}
        asset_content_type: application/x-xz # Tipo correto para arquivos .xz

    - name: Clonar repositório de destino https://github.com/voidlinux-br/void-installer.git
      shell: bash
      run: |
        pushd "${{ env.WORK_PATH }}"
        git clone --depth=1 https://github.com/voidlinux-br/void-installer.git
        popd
      env:
        GITHUB_TOKEN: ${{ secrets.ORGANIZATION_TOKEN }}

    - name: Copiar arquivo .tar.gz para o repositório de destino
      shell: bash
      run: |
        ls -lha ${{ env.WORK_PATH }}
        pushd "${{ env.WORK_PATH }}/void-installer"
        cp -fv "${{ env.XZ_FULLNAME }}"     void-x86_64-base-custom-current.tar.xz
        cp -fv "${{ env.XZ_FULLNAME }}.md5" void-x86_64-base-custom-current.tar.xz.md5
        sed -i 's/void-x86_64-base-custom-[0-9]\{8\}\.tar\.xz$/void-x86_64-base-custom-current.tar.xz/' void-x86_64-base-custom-current.tar.xz.md5
        popd

    - name: Configurar Git para commit
      shell: bash
      run: |
        pushd "${{ env.WORK_PATH }}/void-installer"
        git config --global user.email "vctafesta@gmail.com"
        git config --global user.name "GitHub Actions"
        git remote set-url origin https://x-access-token:${{ secrets.ORGANIZATION_TOKEN }}@github.com/voidlinux-br/void-installer.git
        popd

    - name: Fazer commit do arquivo .tar.gz
      shell: bash
      run: |
        pushd "${{ env.WORK_PATH }}/void-installer"
        ls -lha
        git add .
        git commit -m "Gerado e adicionado automaticamente pelo Github Actions"
        git status
        popd

    - name: Empurrar mudanças para o repositório de destino
      shell: bash
      run: |
        pushd "${{ env.WORK_PATH }}/void-installer"
        git push origin main
        popd
      env:
        GITHUB_TOKEN: ${{ secrets.ORGANIZATION_TOKEN }}
